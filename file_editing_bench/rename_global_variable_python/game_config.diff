--- a/file_editing_bench/rename_global_variable_python/task_files/game_config.py
+++ b/file_editing_bench/rename_global_variable_python/game_config.after.py
@@ -1,35 +1,35 @@
 # Global configuration for the game engine
-GAME_SPD = 60  # Frames per second for the game loop
+FRAMES_PER_SECOND = 60  # Frames per second for the game loop
 
 def initialize_game():
-    global GAME_SPD
-    print(f"Initializing game with {GAME_SPD} FPS")
-    return GAME_SPD
+    global FRAMES_PER_SECOND
+    print(f"Initializing game with {FRAMES_PER_SECOND} FPS")
+    return FRAMES_PER_SECOND
 
 def update_game_speed(new_speed):
-    global GAME_SPD
+    global FRAMES_PER_SECOND
     if 30 <= new_speed <= 144:
-        GAME_SPD = new_speed
+        FRAMES_PER_SECOND = new_speed
         return True
     return False
 
 def get_frame_delay():
     # Calculate delay between frames in milliseconds
-    return 1000 / GAME_SPD
+    return 1000 / FRAMES_PER_SECOND
 
 class GameEngine:
     def __init__(self):
-        self.frame_rate = GAME_SPD
+        self.frame_rate = FRAMES_PER_SECOND
     
     def run(self):
         while True:
-            delay = 1000 / GAME_SPD
+            delay = 1000 / FRAMES_PER_SECOND
             # Game loop implementation...
             break  # Placeholder to avoid infinite loop
 
 # Example usage
 if __name__ == "__main__":
     engine = GameEngine()
-    print(f"Current game speed: {GAME_SPD}")
+    print(f"Current game speed: {FRAMES_PER_SECOND}")
     update_game_speed(120)
-    print(f"Updated game speed: {GAME_SPD}")
\ No newline at end of file
+    print(f"Updated game speed: {FRAMES_PER_SECOND}")
\ No newline at end of file
