--- a/file_editing_bench/change_fn_ordering_in_file_typescript/task_files/dataProcessing.ts
+++ b/file_editing_bench/change_fn_ordering_in_file_typescript/dataProcessing.after.ts
@@ -4,13 +4,9 @@ interface DataPoint {
     label?: string;
 }
 
-export function calculateAverage(data: DataPoint[]): number {
-    if (data.length === 0) return 0;
-    return data.reduce((sum, point) => sum + point.value, 0) / data.length;
-}
-
-export function filterByTimeRange(data: DataPoint[], startTime: number, endTime: number): DataPoint[] {
-    return data.filter(point => point.timestamp >= startTime && point.timestamp <= endTime);
+export function findMinValue(data: DataPoint[]): number {
+    if (data.length === 0) throw new Error("Empty dataset");
+    return Math.min(...data.map(point => point.value));
 }
 
 export function findMaxValue(data: DataPoint[]): number {
@@ -18,6 +14,11 @@ export function findMaxValue(data: DataPoint[]): number {
     return Math.max(...data.map(point => point.value));
 }
 
+export function calculateAverage(data: DataPoint[]): number {
+    if (data.length === 0) return 0;
+    return data.reduce((sum, point) => sum + point.value, 0) / data.length;
+}
+
 export function normalizeData(data: DataPoint[]): DataPoint[] {
     const maxVal = findMaxValue(data);
     return data.map(point => ({
@@ -26,20 +27,6 @@ export function normalizeData(data: DataPoint[]): DataPoint[] {
     }));
 }
 
-export function groupByLabel(data: DataPoint[]): Map<string, DataPoint[]> {
-    return data.reduce((groups, point) => {
-        const label = point.label || 'undefined';
-        const group = groups.get(label) || [];
-        groups.set(label, [...group, point]);
-        return groups;
-    }, new Map<string, DataPoint[]>());
-}
-
-export function findMinValue(data: DataPoint[]): number {
-    if (data.length === 0) throw new Error("Empty dataset");
-    return Math.min(...data.map(point => point.value));
-}
-
 export function standardizeData(data: DataPoint[]): DataPoint[] {
     const avg = calculateAverage(data);
     const squaredDiffs = data.map(point => Math.pow(point.value - avg, 2));
@@ -53,4 +40,17 @@ export function standardizeData(data: DataPoint[]): DataPoint[] {
 
 export function sortByTimestamp(data: DataPoint[]): DataPoint[] {
     return [...data].sort((a, b) => a.timestamp - b.timestamp);
+}
+
+export function filterByTimeRange(data: DataPoint[], startTime: number, endTime: number): DataPoint[] {
+    return data.filter(point => point.timestamp >= startTime && point.timestamp <= endTime);
+}
+
+export function groupByLabel(data: DataPoint[]): Map<string, DataPoint[]> {
+    return data.reduce((groups, point) => {
+        const label = point.label || 'undefined';
+        const group = groups.get(label) || [];
+        groups.set(label, [...group, point]);
+        return groups;
+    }, new Map<string, DataPoint[]>());
 }
\ No newline at end of file
