--- a/file_editing_bench/move_utils_typescript/task_files/transactionProcessor.ts
+++ b/file_editing_bench/move_utils_typescript/transactionProcessor.after.ts
@@ -4,14 +4,35 @@ import { Either, left, right } from 'fp-ts/Either';
 import { pipe } from 'fp-ts/function';
 import { z } from 'zod';
 import { readFileSync } from 'fs';
-import { 
-  validateAmount, 
-  validateDate, 
-  formatCurrency, 
-  sanitizeInput,
-  generateTransactionId,
-  parseCSVRow
-} from './utils';
+import { isEmpty } from 'lodash';
+import { validateAmount } from './utils';
+
+// Utility functions moved from utils.ts
+export const validateDate = (date: string): Either<string, Date> => {
+  const parsed = new Date(date);
+  return isNaN(parsed.getTime()) 
+    ? left('Invalid date format')
+    : right(parsed);
+};
+
+export const formatCurrency = (amount: BigNumber): string => {
+  return `$${amount.toFormat(2)}`;
+};
+
+export const sanitizeInput = (input: string): string => {
+  return input.trim().replace(/[<>]/g, '');
+};
+
+export const generateTransactionId = (): string => {
+  return `TXN-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;
+};
+
+export const parseCSVRow = (row: string): string[] => {
+  return row
+    .split(',')
+    .map(cell => cell.trim())
+    .filter(cell => !isEmpty(cell));
+};
 
 // Types
 interface Transaction {
