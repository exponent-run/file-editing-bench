--- a/file_editing_bench/change_fn_ordering_in_class_python/task_files/data_processor.py
+++ b/file_editing_bench/change_fn_ordering_in_class_python/data_processor.after.py
@@ -1,10 +1,22 @@
 class DataProcessor:
+    def __init__(self, temp_dir="/tmp"):
+        """Initialize the data processor."""
+        self.temp_dir = temp_dir
+        self.processed_count = 0
+
     def process_batch(self, data_batch):
         """Process a batch of data records."""
         validated_data = self.validate_data(data_batch)
         transformed = self.transform_data(validated_data)
         return self.save_results(transformed)
 
+    def get_stats(self):
+        """Return processing statistics."""
+        return {
+            'processed_count': self.processed_count,
+            'temp_dir': self.temp_dir
+        }
+
     def cleanup_temp_files(self):
         """Remove any temporary files created during processing."""
         import os
@@ -12,15 +24,13 @@ class DataProcessor:
             if file.endswith('.tmp'):
                 os.remove(os.path.join(self.temp_dir, file))
 
-    def __init__(self, temp_dir="/tmp"):
-        """Initialize the data processor."""
-        self.temp_dir = temp_dir
-        self.processed_count = 0
-
-    def save_results(self, processed_data):
-        """Save the processed results to storage."""
-        self.processed_count += len(processed_data)
-        return [item.get('id') for item in processed_data]
+    def validate_data(self, data):
+        """Validate the input data format."""
+        valid_records = []
+        for record in data:
+            if all(k in record for k in ['id', 'raw_value', 'timestamp']):
+                valid_records.append(record)
+        return valid_records
 
     def transform_data(self, data):
         """Transform the validated data into the required format."""
@@ -33,17 +43,7 @@ class DataProcessor:
             for item in data
         ]
 
-    def get_stats(self):
-        """Return processing statistics."""
-        return {
-            'processed_count': self.processed_count,
-            'temp_dir': self.temp_dir
-        }
-
-    def validate_data(self, data):
-        """Validate the input data format."""
-        valid_records = []
-        for record in data:
-            if all(k in record for k in ['id', 'raw_value', 'timestamp']):
-                valid_records.append(record)
-        return valid_records
\ No newline at end of file
+    def save_results(self, processed_data):
+        """Save the processed results to storage."""
+        self.processed_count += len(processed_data)
+        return [item.get('id') for item in processed_data]
\ No newline at end of file
