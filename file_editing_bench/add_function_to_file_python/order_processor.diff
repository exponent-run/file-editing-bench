--- a/file_editing_bench/add_function_to_file_python/task_files/order_processor.py
+++ b/file_editing_bench/add_function_to_file_python/order_processor.after.py
@@ -24,6 +24,39 @@ class OrderProcessor:
     def __init__(self):
         self.orders: List[Order] = []
     
+    def calculate_discounted_price(self, item: OrderItem) -> float:
+        """
+        Calculate the total price for an item including any applicable discounts.
+        
+        Args:
+            item: The OrderItem to calculate the price for
+            
+        Returns:
+            float: The final price after applying any discounts
+            
+        Raises:
+            ValueError: If quantity or unit_price is invalid
+        """
+        if item.quantity <= 0:
+            raise ValueError(f"Invalid quantity for product {item.product_id}")
+        if item.unit_price <= 0:
+            raise ValueError(f"Invalid price for product {item.product_id}")
+        
+        item_price = item.quantity * item.unit_price
+        
+        # Apply category-specific discounts
+        if item.category == "electronics":
+            if item.quantity >= 3:
+                item_price *= 0.85  # 15% bulk discount
+        elif item.category == "books":
+            if item.quantity >= 5:
+                item_price *= 0.90  # 10% bulk discount
+        elif item.category == "clothing":
+            if datetime.now().month == 12:  # Holiday season
+                item_price *= 0.95  # 5% seasonal discount
+        
+        return item_price
+    
     def process_order(self, order: Order) -> float:
         """Process an order and return the total price."""
         if not order.items:
@@ -31,27 +64,7 @@ class OrderProcessor:
         
         total_price = 0.0
         for item in order.items:
-            # Basic validation
-            if item.quantity <= 0:
-                raise ValueError(f"Invalid quantity for product {item.product_id}")
-            if item.unit_price <= 0:
-                raise ValueError(f"Invalid price for product {item.product_id}")
-            
-            # Calculate item total
-            item_price = item.quantity * item.unit_price
-            
-            # Apply category-specific discounts
-            if item.category == "electronics":
-                if item.quantity >= 3:
-                    item_price *= 0.85  # 15% bulk discount
-            elif item.category == "books":
-                if item.quantity >= 5:
-                    item_price *= 0.90  # 10% bulk discount
-            elif item.category == "clothing":
-                if datetime.now().month == 12:  # Holiday season
-                    item_price *= 0.95  # 5% seasonal discount
-            
-            total_price += item_price
+            total_price += self.calculate_discounted_price(item)
         
         # Store the processed order
         self.orders.append(order)
